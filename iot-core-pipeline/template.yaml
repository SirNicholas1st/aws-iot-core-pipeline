AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: CF template for iot-core pipeline
Parameters:

  Environment:
    Description: Used in resource names.
    Type: String
    Default: sirnicholas
  RawBucketName:
    Description: Bucket for the raw data.
    Type: String
    Default: iot-core-raw-data-bucket-321
  IotTopicName:
    Description: Name for the IoT topic where the messages are intended to be sent
    Type: String
    Default: iot-test-topic
  TargetBucketName:
    Description: Name for the parsed files will be saved.
    Type: String
    Default: target-bucket-iot-parser-321


Resources:
  RawDataBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      UpdateReplacePolicy: Retain
      Properties: 
        BucketName: !Sub '${Environment}-${RawBucketName}'
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
          - Id: expireAfter5Days
            Status: Enabled
            ExpirationInDays: 4
            NoncurrentVersionExpirationInDays: 1

  TargetBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      UpdateReplacePolicy: Retain
      Properties: 
        BucketName: !Sub '${Environment}-${TargetBucketName}'
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
          - Id: expireAfter5Days
            Status: Enabled
            ExpirationInDays: 4
            NoncurrentVersionExpirationInDays: 1
  
  # Creating an iot thing
  IoTThing:
    Type: AWS::IoT::Thing
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
         ThingName: !Sub '${Environment}-iot-thing-321'


  # defining a policy that is meant to be associated with the created certificate
  # The certificate creation with click ops from console.
  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
         PolicyName: 'IotPolicy'
         PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'iot:Connect'
                    - 'iot:Publish'
                  Resource: 
                    - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${Environment}-iot-thing-321'
                      # Allow publishing to a specific topic.
                    - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${IotTopicName}'
                      # Allow publishing to any sub-topics under the specific topic.
                    - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${IotTopicName}/*'

  # Creating a firehose stream
  FirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
         - FirehoseRole
         - ParserLambda
    Properties:
        DeliveryStreamName: !Sub ${Environment}-firehose-delivery-stream-321
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration:
            BucketARN: !GetAtt RawDataBucket.Arn
            RoleARN: !GetAtt FirehoseRole.Arn
            BufferingHints:
                 IntervalInSeconds: 60
                 SizeInMBs: 1
            CompressionFormat: GZIP
            FileExtension: .csv.gz
            Prefix: !Sub '${Environment}/data/'
            ErrorOutputPrefix: !Sub '${Environment}/error/'
            CloudWatchLoggingOptions:
                Enabled: true
                LogGroupName: !Sub "/aws/kinesisfirehose/${Environment}-firehose-321"
                LogStreamName: "S3DeliveryFromIoTCore"
            ProcessingConfiguration:
                Enabled: True
                Processors:
                  - Type: Lambda
                    Parameters:
                      - ParameterName: LambdaArn
                        ParameterValue: !GetAtt ParserLambda.Arn
            S3BackupMode: "Enabled"
            S3BackupConfiguration:
                  BucketARN: !GetAtt RawDataBucket.Arn
                  RoleARN: !GetAtt FirehoseRole.Arn
                  Prefix: !Sub '${Environment}/data/'
                  CompressionFormat: GZIP
                  BufferingHints:
                       IntervalInSeconds: 60
                       SizeInMBs: 1
        

  # Creating a role for the firehose stream, it needs the rights to write to the target bucket, I also want it log errors.
  FirehoseRole:
    Type: AWS::IAM::Role
    DependsOn:
          - ParserLambda
    Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: "firehose.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: !Sub '${Environment}-firehoserole-321'
            PolicyDocument: 
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetBucketLocation
                    - s3:ListBucket
                  Resource:
                    - !Sub arn:aws:s3:::${Environment}-${RawBucketName}/
                    - !Sub arn:aws:s3:::${Environment}-${RawBucketName}/*
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
                - Effect: Allow
                  Action: 
                    - lambda:InvokeFunction
                  Resource: !GetAtt ParserLambda.Arn


  # Creating a role for the IoT, it needs the rights to send values to the firehose stream.
  IotRoleFirehose:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: "iot.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: !Sub '${Environment}-iot-to-firehose-policy'
            PolicyDocument: 
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - firehose:PutRecord
                    - firehose:PutRecordBatch
                  Resource: !Sub arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${Environment}-firehose-delivery-stream-321


  # The IoT rule that will take every message from the topic and any sub topics         
  IoTRuleTopic:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub '${Environment}iotrule321'
      TopicRulePayload:
        Actions:
          - Firehose:
              DeliveryStreamName: !Ref FirehoseDeliveryStream
              RoleArn: !GetAtt IotRoleFirehose.Arn
              Separator: "\n"
        AwsIotSqlVersion: "2016-03-23"
        Sql: !Sub SELECT topic() as topic, * FROM '${IotTopicName}/+'
        RuleDisabled: False

  # Defining the lambda function that will be triggered by the firehose
  ParserLambda:
    Type: AWS::Serverless::Function
    DependsOn:
          - ParserLambdaRole
    Properties:
      CodeUri: ./lambda
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt ParserLambdaRole.Arn
      Runtime: python3.12
      Timeout: 60
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TARGET_BUCKET: !Sub ${Environment}-${TargetBucketName}
      Layers:
           - !Ref PandasLayer
  
  # Creating a role for the lambda with the necessary permissions
  ParserLambdaRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: !Sub '${Environment}-parser-lambda-role'
            PolicyDocument: 
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
                - Effect: Allow
                  Action: 
                    - s3:PutObject
                  Resource: 
                    - !Sub arn:aws:s3:::${Environment}-${TargetBucketName}/
                    - !Sub arn:aws:s3:::${Environment}-${TargetBucketName}/*
                - Effect: Allow
                  Action:
                    - firehose:GetRecord
                    - firehose:DescribeDeliveryStream
                    - firehose:ListDeliveryStreams
                    - firehose:ListTagsForDeliveryStream
                  Resource:
                    - !Sub arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${Environment}-firehose-delivery-stream-321
  
  PandasLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Environment}-iot-core-pandas-layer
      Description: A layer with Pandas
      ContentUri:  ./layers/pandas.zip
      CompatibleRuntimes:
           - python3.12
      RetentionPolicy: Delete